// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"uniswap/internal/biz"
	"uniswap/internal/conf"
	"uniswap/internal/data"
	"uniswap/internal/server"
	"uniswap/internal/service"
)

import (
	_ "github.com/gogf/gf/contrib/drivers/mysql/v2"
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	poolRepo := data.NewPoolRepo(dataData, logger)
	tickRepo := data.NewTickRepo(dataData, logger)
	tickUsecase := biz.NewTickUsecase(tickRepo, logger)
	observationRepo := data.NewObservationRepo(dataData, logger)
	observationUsecase := biz.NewObservationUsecase(observationRepo, logger)
	tickBitmapRepo := data.NewTickBitmapRepo(dataData, logger)
	tickBitmapUsecase := biz.NewTickBitMapUsecase(tickBitmapRepo, logger)
	liquidityRepo := data.NewLiquidityRepo(dataData, logger)
	liquidityUsecase := biz.NewLiquidityUsecase(liquidityRepo, logger)
	poolUsecase := biz.NewPoolUsecase(poolRepo, logger, tickUsecase, observationUsecase, tickBitmapUsecase, liquidityUsecase)
	routerUsecase := biz.NewRouterUsecase(logger, poolUsecase)
	routerService := service.NewRouterService(routerUsecase)
	grpcServer := server.NewGRPCServer(confServer, logger, routerService)
	httpServer := server.NewHTTPServer(confServer, logger, routerService)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
