// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.1
// source: swap/v1/pool.proto

package swap

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPoolCreatePool = "/api.swap.Pool/CreatePool"
const OperationPoolGetPool = "/api.swap.Pool/GetPool"

type PoolHTTPServer interface {
	CreatePool(context.Context, *CreatePoolRequest) (*CreatePoolReply, error)
	GetPool(context.Context, *GetPoolRequest) (*GetPoolReply, error)
}

func RegisterPoolHTTPServer(s *http.Server, srv PoolHTTPServer) {
	r := s.Route("/")
	r.POST("/pool", _Pool_CreatePool0_HTTP_Handler(srv))
	r.GET("/pool/{token0}/{token1}/{fee}", _Pool_GetPool0_HTTP_Handler(srv))
}

func _Pool_CreatePool0_HTTP_Handler(srv PoolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePoolRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPoolCreatePool)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePool(ctx, req.(*CreatePoolRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePoolReply)
		return ctx.Result(200, reply)
	}
}

func _Pool_GetPool0_HTTP_Handler(srv PoolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPoolRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPoolGetPool)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPool(ctx, req.(*GetPoolRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPoolReply)
		return ctx.Result(200, reply)
	}
}

type PoolHTTPClient interface {
	CreatePool(ctx context.Context, req *CreatePoolRequest, opts ...http.CallOption) (rsp *CreatePoolReply, err error)
	GetPool(ctx context.Context, req *GetPoolRequest, opts ...http.CallOption) (rsp *GetPoolReply, err error)
}

type PoolHTTPClientImpl struct {
	cc *http.Client
}

func NewPoolHTTPClient(client *http.Client) PoolHTTPClient {
	return &PoolHTTPClientImpl{client}
}

func (c *PoolHTTPClientImpl) CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...http.CallOption) (*CreatePoolReply, error) {
	var out CreatePoolReply
	pattern := "/pool"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPoolCreatePool))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PoolHTTPClientImpl) GetPool(ctx context.Context, in *GetPoolRequest, opts ...http.CallOption) (*GetPoolReply, error) {
	var out GetPoolReply
	pattern := "/pool/{token0}/{token1}/{fee}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPoolGetPool))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
