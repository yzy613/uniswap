// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: swap/v1/swap.proto

package swap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Swap_CreateSwap_FullMethodName = "/api.swap.Swap/CreateSwap"
	Swap_UpdateSwap_FullMethodName = "/api.swap.Swap/UpdateSwap"
	Swap_DeleteSwap_FullMethodName = "/api.swap.Swap/DeleteSwap"
	Swap_GetSwap_FullMethodName    = "/api.swap.Swap/GetSwap"
	Swap_ListSwap_FullMethodName   = "/api.swap.Swap/ListSwap"
)

// SwapClient is the client API for Swap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwapClient interface {
	CreateSwap(ctx context.Context, in *CreateSwapRequest, opts ...grpc.CallOption) (*CreateSwapReply, error)
	UpdateSwap(ctx context.Context, in *UpdateSwapRequest, opts ...grpc.CallOption) (*UpdateSwapReply, error)
	DeleteSwap(ctx context.Context, in *DeleteSwapRequest, opts ...grpc.CallOption) (*DeleteSwapReply, error)
	GetSwap(ctx context.Context, in *GetSwapRequest, opts ...grpc.CallOption) (*GetSwapReply, error)
	ListSwap(ctx context.Context, in *ListSwapRequest, opts ...grpc.CallOption) (*ListSwapReply, error)
}

type swapClient struct {
	cc grpc.ClientConnInterface
}

func NewSwapClient(cc grpc.ClientConnInterface) SwapClient {
	return &swapClient{cc}
}

func (c *swapClient) CreateSwap(ctx context.Context, in *CreateSwapRequest, opts ...grpc.CallOption) (*CreateSwapReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSwapReply)
	err := c.cc.Invoke(ctx, Swap_CreateSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapClient) UpdateSwap(ctx context.Context, in *UpdateSwapRequest, opts ...grpc.CallOption) (*UpdateSwapReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSwapReply)
	err := c.cc.Invoke(ctx, Swap_UpdateSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapClient) DeleteSwap(ctx context.Context, in *DeleteSwapRequest, opts ...grpc.CallOption) (*DeleteSwapReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSwapReply)
	err := c.cc.Invoke(ctx, Swap_DeleteSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapClient) GetSwap(ctx context.Context, in *GetSwapRequest, opts ...grpc.CallOption) (*GetSwapReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSwapReply)
	err := c.cc.Invoke(ctx, Swap_GetSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapClient) ListSwap(ctx context.Context, in *ListSwapRequest, opts ...grpc.CallOption) (*ListSwapReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSwapReply)
	err := c.cc.Invoke(ctx, Swap_ListSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwapServer is the server API for Swap service.
// All implementations must embed UnimplementedSwapServer
// for forward compatibility
type SwapServer interface {
	CreateSwap(context.Context, *CreateSwapRequest) (*CreateSwapReply, error)
	UpdateSwap(context.Context, *UpdateSwapRequest) (*UpdateSwapReply, error)
	DeleteSwap(context.Context, *DeleteSwapRequest) (*DeleteSwapReply, error)
	GetSwap(context.Context, *GetSwapRequest) (*GetSwapReply, error)
	ListSwap(context.Context, *ListSwapRequest) (*ListSwapReply, error)
	mustEmbedUnimplementedSwapServer()
}

// UnimplementedSwapServer must be embedded to have forward compatible implementations.
type UnimplementedSwapServer struct {
}

func (UnimplementedSwapServer) CreateSwap(context.Context, *CreateSwapRequest) (*CreateSwapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwap not implemented")
}
func (UnimplementedSwapServer) UpdateSwap(context.Context, *UpdateSwapRequest) (*UpdateSwapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwap not implemented")
}
func (UnimplementedSwapServer) DeleteSwap(context.Context, *DeleteSwapRequest) (*DeleteSwapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSwap not implemented")
}
func (UnimplementedSwapServer) GetSwap(context.Context, *GetSwapRequest) (*GetSwapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwap not implemented")
}
func (UnimplementedSwapServer) ListSwap(context.Context, *ListSwapRequest) (*ListSwapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwap not implemented")
}
func (UnimplementedSwapServer) mustEmbedUnimplementedSwapServer() {}

// UnsafeSwapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwapServer will
// result in compilation errors.
type UnsafeSwapServer interface {
	mustEmbedUnimplementedSwapServer()
}

func RegisterSwapServer(s grpc.ServiceRegistrar, srv SwapServer) {
	s.RegisterService(&Swap_ServiceDesc, srv)
}

func _Swap_CreateSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServer).CreateSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swap_CreateSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServer).CreateSwap(ctx, req.(*CreateSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swap_UpdateSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServer).UpdateSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swap_UpdateSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServer).UpdateSwap(ctx, req.(*UpdateSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swap_DeleteSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServer).DeleteSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swap_DeleteSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServer).DeleteSwap(ctx, req.(*DeleteSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swap_GetSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServer).GetSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swap_GetSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServer).GetSwap(ctx, req.(*GetSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swap_ListSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServer).ListSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swap_ListSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServer).ListSwap(ctx, req.(*ListSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Swap_ServiceDesc is the grpc.ServiceDesc for Swap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Swap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.swap.Swap",
	HandlerType: (*SwapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSwap",
			Handler:    _Swap_CreateSwap_Handler,
		},
		{
			MethodName: "UpdateSwap",
			Handler:    _Swap_UpdateSwap_Handler,
		},
		{
			MethodName: "DeleteSwap",
			Handler:    _Swap_DeleteSwap_Handler,
		},
		{
			MethodName: "GetSwap",
			Handler:    _Swap_GetSwap_Handler,
		},
		{
			MethodName: "ListSwap",
			Handler:    _Swap_ListSwap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swap/v1/swap.proto",
}
