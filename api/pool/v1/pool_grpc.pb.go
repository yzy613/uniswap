// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: pool/v1/pool.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Pool_CreatePool_FullMethodName = "/api.pool.v1.Pool/CreatePool"
	Pool_UpdatePool_FullMethodName = "/api.pool.v1.Pool/UpdatePool"
	Pool_DeletePool_FullMethodName = "/api.pool.v1.Pool/DeletePool"
	Pool_GetPool_FullMethodName    = "/api.pool.v1.Pool/GetPool"
	Pool_ListPool_FullMethodName   = "/api.pool.v1.Pool/ListPool"
)

// PoolClient is the client API for Pool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoolClient interface {
	CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*CreatePoolReply, error)
	UpdatePool(ctx context.Context, in *UpdatePoolRequest, opts ...grpc.CallOption) (*UpdatePoolReply, error)
	DeletePool(ctx context.Context, in *DeletePoolRequest, opts ...grpc.CallOption) (*DeletePoolReply, error)
	GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolReply, error)
	ListPool(ctx context.Context, in *ListPoolRequest, opts ...grpc.CallOption) (*ListPoolReply, error)
}

type poolClient struct {
	cc grpc.ClientConnInterface
}

func NewPoolClient(cc grpc.ClientConnInterface) PoolClient {
	return &poolClient{cc}
}

func (c *poolClient) CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*CreatePoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePoolReply)
	err := c.cc.Invoke(ctx, Pool_CreatePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolClient) UpdatePool(ctx context.Context, in *UpdatePoolRequest, opts ...grpc.CallOption) (*UpdatePoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePoolReply)
	err := c.cc.Invoke(ctx, Pool_UpdatePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolClient) DeletePool(ctx context.Context, in *DeletePoolRequest, opts ...grpc.CallOption) (*DeletePoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePoolReply)
	err := c.cc.Invoke(ctx, Pool_DeletePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolClient) GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPoolReply)
	err := c.cc.Invoke(ctx, Pool_GetPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolClient) ListPool(ctx context.Context, in *ListPoolRequest, opts ...grpc.CallOption) (*ListPoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPoolReply)
	err := c.cc.Invoke(ctx, Pool_ListPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoolServer is the server API for Pool service.
// All implementations must embed UnimplementedPoolServer
// for forward compatibility
type PoolServer interface {
	CreatePool(context.Context, *CreatePoolRequest) (*CreatePoolReply, error)
	UpdatePool(context.Context, *UpdatePoolRequest) (*UpdatePoolReply, error)
	DeletePool(context.Context, *DeletePoolRequest) (*DeletePoolReply, error)
	GetPool(context.Context, *GetPoolRequest) (*GetPoolReply, error)
	ListPool(context.Context, *ListPoolRequest) (*ListPoolReply, error)
	mustEmbedUnimplementedPoolServer()
}

// UnimplementedPoolServer must be embedded to have forward compatible implementations.
type UnimplementedPoolServer struct {
}

func (UnimplementedPoolServer) CreatePool(context.Context, *CreatePoolRequest) (*CreatePoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool not implemented")
}
func (UnimplementedPoolServer) UpdatePool(context.Context, *UpdatePoolRequest) (*UpdatePoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePool not implemented")
}
func (UnimplementedPoolServer) DeletePool(context.Context, *DeletePoolRequest) (*DeletePoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePool not implemented")
}
func (UnimplementedPoolServer) GetPool(context.Context, *GetPoolRequest) (*GetPoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool not implemented")
}
func (UnimplementedPoolServer) ListPool(context.Context, *ListPoolRequest) (*ListPoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPool not implemented")
}
func (UnimplementedPoolServer) mustEmbedUnimplementedPoolServer() {}

// UnsafePoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoolServer will
// result in compilation errors.
type UnsafePoolServer interface {
	mustEmbedUnimplementedPoolServer()
}

func RegisterPoolServer(s grpc.ServiceRegistrar, srv PoolServer) {
	s.RegisterService(&Pool_ServiceDesc, srv)
}

func _Pool_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServer).CreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pool_CreatePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServer).CreatePool(ctx, req.(*CreatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pool_UpdatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServer).UpdatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pool_UpdatePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServer).UpdatePool(ctx, req.(*UpdatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pool_DeletePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServer).DeletePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pool_DeletePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServer).DeletePool(ctx, req.(*DeletePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pool_GetPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServer).GetPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pool_GetPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServer).GetPool(ctx, req.(*GetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pool_ListPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServer).ListPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pool_ListPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServer).ListPool(ctx, req.(*ListPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pool_ServiceDesc is the grpc.ServiceDesc for Pool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.pool.v1.Pool",
	HandlerType: (*PoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePool",
			Handler:    _Pool_CreatePool_Handler,
		},
		{
			MethodName: "UpdatePool",
			Handler:    _Pool_UpdatePool_Handler,
		},
		{
			MethodName: "DeletePool",
			Handler:    _Pool_DeletePool_Handler,
		},
		{
			MethodName: "GetPool",
			Handler:    _Pool_GetPool_Handler,
		},
		{
			MethodName: "ListPool",
			Handler:    _Pool_ListPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pool/v1/pool.proto",
}
